/*
 * Copyright (c) 2021.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack

plugins {
    kotlin("jvm")
    application
    alias(libs.plugins.kotlin.serialization)
    id("mpconsumer")
}

base {
    description = "Main darwin web interface as ktor app"
    archivesName.set("darwinktor")
}

val ktorVersion = libs.versions.ktor.get()

kotlin {
//    jvm {}
/*
    js(IR) {
        moduleName = "darwin"
        browser {
//            dceTask {
//                keep("darwin.html.onLinkClick")
//                dceOptions.devMode = true
//            }

            webpackTask {
                devtool = "source-map"
                mainOutputFileName = "js/darwin.js"
            }
        }
        binaries.executable()
    }
*/

    sourceSets {
//        val commonMain by getting {
//            dependencies {
//                implementation(libs.kotlinx.serialization.json)
//                implementation(libs.ktor.client.core)
//            }
//        }
//
//        val commonTest by getting {
//            dependencies {
//                implementation(kotlin("test-common"))
//                implementation(kotlin("test-annotations-common"))
//            }
//        }

        val main by getting {
//            val webpackTask = tasks.getByName<KotlinWebpack>("jsBrowserDevelopmentWebpack")
            dependencies {
                implementation(libs.kotlinx.serialization.json)
                implementation(libs.ktor.client.core)
                implementation(libs.ktor.serialization.xml)
                implementation(libs.ktor.serialization.json)
                implementation(libs.ktor.server.core)
                implementation(libs.ktor.server.auth)
                implementation(libs.ktor.server.netty)
                implementation(libs.ktor.server.contentNegotiation)
                implementation(libs.ktor.server.compression)
                implementation(libs.kotlinx.html)
                implementation(project(":darwin:ktorSupport"))
                runtimeOnly(libs.requirejs)

//                runtimeOnly(files(webpackTask.outputDirectory))
                compileOnly(project(":JavaCommonApi"))
                compileOnly(project(":DarwinJavaApi"))
            }
//            dependsOn(webpackTask)
        }

/*
        val jsMain by getting {
            dependencies {
                implementation(libs.ktor.client.js)
                implementation(libs.ktor.client.json)
                implementation(libs.ktor.serialization.json)
                implementation(libs.requirejs)
                api(project(":darwin"*/
/*, configuration = "jsDefault"*//*
))
            }
        }
*/

    }
}

application {
    mainClass.set("io.github.pdvrieze.darwin.ktor.MainKt")
}

val webPacks: Configuration by configurations.creating {
    description = "Exclusive configuration for webPack dependencies"
}

dependencies {
    "webPacks"(libs.requirejs)
}

/*
tasks.named<Jar>("jvmJar") {
    val taskName = if (project.hasProperty("isProduction")) {
        "jsBrowserProductionWebpack"
    } else {
        "jsBrowserDevelopmentWebpack"
    }

    val webpackTask = tasks.getByName<KotlinWebpack>(taskName)
    dependsOn(webpackTask) // make sure JS gets compiled first

    from(webPacks.map { zipTree(it) }) {
        this.include { it.path.endsWith(".js")*/
/* && path.startsWith("META-INF/resources")*//*
 }
        eachFile {
            logger.debug("Webpack dependency: ${this.sourceName}")
            val i = sourcePath.lastIndexOf('/')
            if (sourcePath.startsWith("META-INF") && i > 0) {
                val myNewPath = "js/${sourcePath.substring(i + 1)}"
                logger.debug("Renaming $sourcePath to $myNewPath")
                path = myNewPath
            }
        }
    }

    from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) {// bring output file along into the JAR
        into("js/")
    }

    duplicatesStrategy = DuplicatesStrategy.WARN
}
*/

tasks.named<JavaExec>("run") {
    classpath(configurations["jvmRuntimeClasspath"])
    classpath(tasks.getByName<Jar>("jvmJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
}
