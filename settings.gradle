/*
 * Copyright (c) 2016.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

pluginManagement {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }

        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }

        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    resolutionStrategy {
        eachPlugin {
            if (requested.id.id == "kotlinx-serialization") {
                def version = (requested.version == null || requested.version.length() == 0) ? kotlin_version : requested.version
/*
                // The kotlin version. Unfortunately intellij doesn't support the settings delegate (even though gradle does)
                val version = when {
                    !requested.version.isNullOrEmpty()
                         -> requested.version

                    else -> gradle.rootProject.extra["serializationVersion"]
                }
*/
                useModule("org.jetbrains.kotlin:kotlin-serialization:$version")

            } else if (requested.id.id == "net.devrieze.gradlecodegen") {
                useModule("net.devrieze:gradle-codegen:0.5.6")
            } else if (requested.id.id == "org.jetbrains.kotlin.jvm") {
                def version = (requested.version == null || requested.version.length() == 0) ? kotlin_version : requested.version
                useModule("org.jetbrains.kotlin:kotlin-gradle-plugin:$version")
//                classpath "com.android.tools.build:gradle:$androidPluginVersion" //1.5.0
//                classpath "com.bmuschko:gradle-tomcat-plugin:$tomcatPluginVersion"
//
//                classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

            }
        }
    }
}

rootProject.name = "ProcessManager"

include(":multiplatform")
include(":JavaCommonApi")

if(file("kotlinsql").exists()) {
    includeBuild("kotlinsql") {
        dependencySubstitution {
            substitute module("net.devrieze:kotlinsql:") with project(":")
        }
    }
}

if (file("xmlutil").exists()) {
    includeBuild("xmlutil") {
        dependencySubstitution {
            substitute module('net.devrieze:xmlutil') with project(':core')
            substitute module('net.devrieze:xmlutil-serialization') with project(':serialization')
        }
    }
}

include(":java-common")
include(":DarwinJavaApi")

include(":TestSupport")
include(":PE-common")

//include(":endpointDokkalet")

include(":DarwinGenerators")

include(":darwin-sql")

include(":ProcessEngine:core")
include(":ProcessEngine:servlet")

include(":DarwinClients:ProcessEngine")
include(":DarwinClients:WorkQueue")

include(":PEUserMessageHandler")

// No actual implementation yet
// include(":PE-dataservices")

include(":PE-diagram")

include(":accountcommon")
include(":DarwinRealm")
include(":darwin")
include(":darwin:war")
include(":accountmgr")
include(":accountmgr:js")

include(":DarwinServices")

include(":PE-server")

include(":PE-common:endpointDoclet")

include(":structurizr")

include(":jscommon")
include(":webeditor")
// Android modules
if (Boolean.parseBoolean(androidEnabledProp)) {
    include(":android-auth")
    include(":darwinlib")
//    include(":PMEditor")
}
