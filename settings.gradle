/*
 * Copyright (c) 2016.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

pluginManagement {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }

    }
    resolutionStrategy {
        eachPlugin {
            switch (requested.id.id) {
                case "com.android.library":
                case "com.android.application":
                    if (requested.version == null) useVersion(androidPluginVersion)
                    break
                case "kotlin-android":
                case "org.jetbrains.kotlin.android":
                case "org.jetbrains.kotlin.jvm":
                case "kotlin-android-extensions":
                case "org.jetbrains.kotlin.multiplatform":
                case "org.jetbrains.kotlin.plugin.serialization":
                    if (requested.version == null) useVersion(kotlin_version)
                    break
                case "com.bmuschko.tomcat":
                    useModule("com.bmuschko:gradle-tomcat-plugin:2.7.0")
                    break
                case "org.jetbrains.dokka-android":
                    def ver = requested.version != null ? requested.version : dokkaVersion
                    useModule("org.jetbrains.dokka:dokka-android-gradle-plugin:${ver}")
                    break
                case "net.devrieze.gradlecodegen":
                    useModule("net.devrieze:gradle-codegen:0.5.8")
                    break
            }
        }
    }
}

enableFeaturePreview("VERSION_CATALOGS")

rootProject.name = "ProcessManager"

include(":multiplatform")
include(":JavaCommonApi")

if(file("kotlinsql").exists()) {
    includeBuild("kotlinsql") {
        dependencySubstitution {
            substitute module("io.github.pdvrieze.kotlinsql:kotlinsql-monadic:") with project(":")
        }
    }
}

if (file("xmlutil").exists()) {
    includeBuild("xmlutil") {
        dependencySubstitution {
            substitute module('io.github.pdvrieze.xmlutil:core') with project(':core')
            substitute module('io.github.pdvrieze.xmlutil:serialization') with project(':serialization')
        }
    }
}

include(":java-common")
include(":DarwinJavaApi")

include(":TestSupport")
include(":PE-common")

//include(":endpointDokkalet")

include(":DarwinGenerators")

include(":darwin-sql")

include(":ProcessEngine:core")
include(":ProcessEngine:servlet")

include(":DarwinClients:ProcessEngine")

include(":PEUserMessageHandler")
include(":DarwinClients:WorkQueue")

// No actual implementation yet
// include(":PE-dataservices")

include(":PE-diagram")

include(":accountcommon")
include(":DarwinRealm")
include(":darwin")
include(":darwin:war")
include(":darwin:servletSupport")
include(":darwin:ktor")
include(":darwin:ktorSupport")
include(":accountmgr")
include(":accountmgr:js")

include(":DarwinServices")

include(":PE-server")

/*
include(":PE-common:endpointDoclet")
*/
// Stale/broken
//include(":structurizr")

include(":jscommon")
include(":webeditor")

// Android modules
if (Boolean.parseBoolean(androidEnabledProp)) {
    if (file("android-auth").exists()) {
        include(":android-auth")
    }
    include(":darwinlib")
//    include(":PMEditor")
}
