# To enable ProGuard in your project, edit project.properties
# to define the proguard.config property as described in that file.
#
# Add project specific ProGuard rules here.
# By default, the flags in this file are appended to flags specified
# in ${sdk.dir}/tools/proguard/proguard-android.txt
# You can edit the include path and order by changing the ProGuard
# include property in project.properties.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# Add any project specific keep options here:

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}
-forceprocessing
#-target 1.7
-keepnames class ** { *; }

# Coroutines
-dontobfuscate
-dontwarn java.lang.invoke.SerializedLambda
-dontwarn sun.misc.**
-dontwarn sun.nio.ch.DirectBuffer
-dontwarn java.beans.**
-dontnote kotlin.internal.jdk8.JDK8PlatformImplementations
-dontnote kotlin.internal.JRE8PlatformImplementations
-dontnote kotlin.internal.jdk7.JDK7PlatformImplementations
-dontnote kotlin.internal.JRE7PlatformImplementations
-dontnote kotlin.reflect.jvm.internal.ReflectionFactoryImpl
-dontnote COM.newmonics.PercClassLoader.**
-dontnote sun.reflect.ReflectionFactory
-dontnote org.objenesis.strategy.PlatformDescription
-dontnote org.apache.harmony.xnet.provider.jsse.NativeCrypto

-keepclassmembers class ** {
    *** INSTANCE;
    int SDK_INT;
}
-keepclassmembers class kotlin.coroutines.experimental.SafeContinuation {
    *;
}
-keep class kotlin.coroutines.experimental.CoroutineContext$Key
-keep class kotlin.coroutines.experimental.CoroutineContext
-keep class kotlin.coroutines.experimental.Continuation
-keep class kotlin.jvm.functions.Function2
-keep @interface kotlinx.serialization.SerialName

# serialization
-keepattributes *Annotation*, InnerClasses
-dontnote kotlinx.serialization.SerializationKt

-keep,includedescriptorclasses class nl.adaptivity.process.messaging.**$$serializer { *; } # <-- change package name to your app's
-keepclassmembers class nl.adaptivity.process.messaging.** { # <-- change package name to your app's
    *** Companion;
}
-keepclasseswithmembers class nl.adaptivity.process.messaging.** { # <-- change package name to your app's
    kotlinx.serialization.KSerializer serializer(...);
}

-keep,includedescriptorclasses @kotlinx.serialization.Serializable class * { *; }
# Generates invalid constructor call
-dontwarn kotlinx.serialization.ContextSerializer
#-keep class kotlinx.serialization.ContextSerializer { <init>(...); }
# The serializer generates calls to synthetic fields
-dontwarn nl.adaptivity.process.processModel.RootProcessModelBase

-keep,includedescriptorclasses class nl.adaptivity.messaging.**$$serializer { *; } # <-- change package name to your app's
-keepclassmembers class nl.adaptivity.messaging.** { # <-- change package name to your app's
    *** Companion;
}
-keepclasseswithmembers class nl.adaptivity.messaging.** { # <-- change package name to your app's
    kotlinx.serialization.KSerializer serializer(...);
}
-keepclassmembers class nl.adaptivity.android.kryo.serializers.KryoAndroidConstants { *; }

-keep,includedescriptorclasses class nl.adaptivity.process.processModel.**$$serializer { *; } # <-- change package name to your app's
-keepclassmembers class nl.adaptivity.process.processModel.** { # <-- change package name to your app's
    *** Companion;
    *;
}
-keepclasseswithmembers class nl.adaptivity.process.processModel.** { # <-- change package name to your app's
    kotlinx.serialization.KSerializer serializer(...);
}

-keep,includedescriptorclasses class nl.adaptivity.process.processModel.engine.**$$serializer { *; } # <-- change package name to your app's
-keepclassmembers class nl.adaptivity.process.processModel.engine.** { # <-- change package name to your app's
    *** Companion;
}
-keepclasseswithmembers class nl.adaptivity.process.processModel.engine.** { # <-- change package name to your app's
    kotlinx.serialization.KSerializer serializer(...);
}

-dontwarn nl.adaptivity.process.processModel.ActivityBase
-dontwarn nl.adaptivity.process.processModel.EndNodeBase
#-dontwarn nl.adaptivity.process.processModel.EndNodeBase$Companion
#-dontwarn nl.adaptivity.process.processModel.EndNodeBase$Builder$Companion
#-dontwarn nl.adaptivity.process.processModel.JoinBase
#-dontwarn nl.adaptivity.process.processModel.JoinBase$Companion
#-dontwarn nl.adaptivity.process.processModel.JoinBase$Builder$Companion
#-dontwarn nl.adaptivity.process.processModel.JoinSplitBase
#-dontwarn nl.adaptivity.process.processModel.JoinSplitBase$Companion
#-dontwarn nl.adaptivity.process.processModel.JoinSplitBase$Builder$Companion
-dontwarn nl.adaptivity.process.processModel.SplitBase
#-dontwarn nl.adaptivity.process.processModel.SplitBase$Companion
#-dontwarn nl.adaptivity.process.processModel.SplitBase$Builder$Companion
#-dontwarn nl.adaptivity.process.processModel.StartNodeBase
#-dontwarn nl.adaptivity.process.processModel.StartNodeBase$Companion
#-dontwarn nl.adaptivity.process.processModel.StartNodeBase$Builder$Companion
#-dontwarn nl.adaptivity.process.processModel.PredecessorInfo$$serializer
-dontwarn nl.adaptivity.process.processModel.ProcessNodeBase

-dontwarn nl.adaptivity.process.processModel.ProcessModelBase
-dontwarn nl.adaptivity.process.processModel.ProcessModelBase$Companion
-dontwarn nl.adaptivity.process.processModel.ProcessModelBase$$serializer
-dontwarn nl.adaptivity.process.processModel.XmlMessage
-dontwarn nl.adaptivity.process.processModel.engine.XmlActivity

-dontwarn nl.adaptivity.process.processModel.engine.XmlProcessModel
-dontwarn nl.adaptivity.process.util.ListSet$$CC

#Kotlin reflection includes this
-dontwarn kotlin.annotations.jvm.ReadOnly
-dontwarn kotlin.annotations.jvm.Mutable
#Further suppressions for serialization
-dontwarn nl.adaptivity.xmlutil.serialization.XmlElement$Impl
-dontwarn nl.adaptivity.xmlutil.serialization.XmlDefault$Impl
#-dontwarn nl.adaptivity.xmlutil.serialization.canary.CanaryInput$Dummy$Companion

-keepclassmembers class nl.adaptivity.xmlutil.serialization.canary.CanaryInput { # <-- change package name to your app's
    *** Companion;
}
-keepclasseswithmembers class nl.adaptivity.xmlutil.serialization.canary.CanaryInput { # <-- change package name to your app's
    kotlinx.serialization.KSerializer serializer(...);
}

#Don't strip fragment constructor
-keepclassmembers public class * extends android.support.v4.app.Fragment {
   public <init>(...);
}

#Don't remove serialization annotations
-keep @interface nl.adaptivity.xmlutil.serialization.** { *; }
-keep @interface kotlinx.serialization.** { *; }

#Kotlin reflection
-keep class kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsLoaderImpl
-keep class kotlin.reflect.jvm.internal.impl.load.java.FieldOverridabilityCondition
-keep class kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition
-keep class kotlin.reflect.jvm.internal.impl.load.java.JavaIncompatibilityRulesOverridabilityCondition
-keepclassmembers class kotlin.reflect.jvm.** {
 *;
}
-keepclassmembers class nl.adaptivity.process.processModel.RootProcessModelBase {
    java.util.Set getRoles();
}
-keep class kotlin.Metadata { *; }