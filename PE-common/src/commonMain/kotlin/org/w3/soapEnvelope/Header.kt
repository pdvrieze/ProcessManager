/*
 * Copyright (c) 2018.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.09.24 at 08:12:58 PM CEST
//


package org.w3.soapEnvelope

import net.devrieze.util.security.SimplePrincipal
import nl.adaptivity.process.ProcessConsts.Engine
import nl.adaptivity.xmlutil.util.CompactFragment
import nl.adaptivity.xmlutil.util.SimpleXmlDeserializable
import nl.adaptivity.xmlutil.*
import nl.adaptivity.xmlutil.serialization.XmlSerialName


/**
 * Elements replacing the wildcard MUST be namespace qualified, but can be in
 * the targetNamespace
 *
 *
 * Java class for Header complex type.
 *
 *
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * ```
 * <complexType name="Header">
 * <complexContent>
 * <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 * <sequence>
 * <any processContents='lax' maxOccurs="unbounded" minOccurs="0"/>
 * </sequence>
 * <anyAttribute processContents='lax' namespace='##other'/>
 * </restriction>
 * </complexContent>
 * </complexType>
 *
 */
class Header : SimpleXmlDeserializable, XmlSerializable {

    @XmlSerialName("any", Envelope.NAMESPACE, Envelope.PREFIX)
    protected var _any: MutableList<CompactFragment>? = null

    val any: MutableList<CompactFragment>
        get() {
            return this._any ?: mutableListOf<CompactFragment>().also { _any = it }
        }

    val otherAttributes = mutableMapOf<QName, String>()

    var principal: SimplePrincipal? = null
        private set

    override val elementName: QName
        get() = ELEMENTNAME

    override fun deserializeChild(reader: XmlReader): Boolean {
        if (reader.isElement(PRINCIPALQNAME)) {
            // XXX make sure this is secure
            principal = SimplePrincipal(reader.readSimpleElement())
        } else {
            val frag = reader.siblingsToFragment()
            any.add(frag)
        }
        return true
    }

    override fun deserializeChildText(elementText: CharSequence): Boolean {
        if (isXmlWhitespace(elementText)) {
            return true
        }
        any.add(CompactFragment(elementText.toString()))
        return true
    }

    override fun deserializeAttribute(attributeNamespace: String?,
                                      attributeLocalName: String,
                                      attributeValue: String): Boolean {
        val qname = QName(attributeNamespace.toString(), attributeLocalName)
        otherAttributes[qname] = attributeValue
        return true
    }

    override fun onBeforeDeserializeChildren(reader: XmlReader) {
        // nothing
    }

    override fun serialize(out: XmlWriter) {
        out.smartStartTag(elementName) {
            for ((key, value) in otherAttributes) {
                writeAttribute(key, value)
            }
            principal?.let { writeSimpleElement(PRINCIPALQNAME, it.toString()) }

            for (n in any) {
                n.serialize(this)
            }
        }
    }

    companion object {

        const val ELEMENTLOCALNAME = "Header"
        val ELEMENTNAME = QName(Envelope.NAMESPACE, ELEMENTLOCALNAME, Envelope.PREFIX)
        const val PRINCIPALLOCALNAME = "principal"
        val PRINCIPALQNAME = QName(Engine.NAMESPACE, "principal",
                                   Engine.NSPREFIX)

        fun deserialize(reader: XmlReader): Header {
            return Header().deserializeHelper(reader)
        }
    }

}
