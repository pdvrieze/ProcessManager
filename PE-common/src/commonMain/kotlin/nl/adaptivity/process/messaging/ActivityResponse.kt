/*
 * Copyright (c) 2018.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2012.09.15 at 03:25:47 PM BST
//


package nl.adaptivity.process.messaging

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.Transient
import nl.adaptivity.process.ProcessConsts
import nl.adaptivity.process.ProcessConsts.Engine
import nl.adaptivity.process.engine.processModel.NodeInstanceState
import nl.adaptivity.util.multiplatform.Class
import nl.adaptivity.xmlutil.util.SimpleXmlDeserializable
import nl.adaptivity.xmlutil.*
import nl.adaptivity.xmlutil.serialization.XmlSerialName


@XmlDeserializer(ActivityResponse.Factory::class)
/**
 *
 *
 * The ActivityResponse type is a class that helps with process aware methods.
 * When returning this class from a method this signifies to the
 * SoapHelper that the method is ProcessAware, and wraps an actual
 * return value. The activityResponse is communicated through the header.
 *
 *
 *
 * When used by JAXB, instances will result in the right header that signifies
 * task awareness to the process engine. This allows responding to a SOAP
 * message to not signify task completion.
 *
 *
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * ```
 * <complexType name="ActivityResponseType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <attribute name="taskState">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="Sent"/>
 *             <enumeration value="Acknowledged"/>
 *             <enumeration value="Taken"/>
 *             <enumeration value="Started"/>
 *             <enumeration value="Complete"/>
 *             <enumeration value="Failed"/>
 *             <enumeration value="Cancelled"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * ```
 *
 * @property nodeInstanceState The state of the task requested.
 * @property returnType The actual return type of the method.
 * @property returnValue The value to return.
 *
 * @param T The type of the actual return value returned in the result of the
 * SOAP message.
 */
@Serializable
@XmlSerialName(ActivityResponse.ELEMENTLOCALNAME, ActivityResponse.NAMESPACE, Engine.NSPREFIX)
class ActivityResponse<T : Any?> : XmlSerializable, SimpleXmlDeserializable {

    private constructor(nodeInstanceState: NodeInstanceState,
                        returnType: Class<T>,
                        returnValue: T) {
        this.nodeInstanceState = nodeInstanceState
        this.returnType = returnType
        this._returnValue = returnValue
    }

    private constructor() {
        _returnValue = null
    }

    @Suppress("MemberVisibilityCanBePrivate")
    @SerialName("taskState")
    lateinit var nodeInstanceState: NodeInstanceState
        private set

    @Transient
    private var _returnValue: T?

    /**
     * The actual return value.
     */
    @Suppress("UNCHECKED_CAST")
    @Transient
    val returnValue
        get() = _returnValue as T

    /**
     * Get the embedded return type.
     *
     * @return The embedded return type.
     */
    @Transient
    lateinit var returnType: Class<T>
        private set


    @Transient
    override val elementName: QName
        get() = ELEMENTNAME

    /**
     * The value of the taskState property as string.
     */
    @Transient
    private var taskStateString: String
        get() = nodeInstanceState.name
        set(value) {
            nodeInstanceState = NodeInstanceState.valueOf(value)
        }

    class Factory : XmlDeserializerFactory<ActivityResponse<*>> {

        override fun deserialize(reader: XmlReader): ActivityResponse<*> {
            return ActivityResponse.deserialize<Any>(reader)
        }
    }

    override fun deserializeChild(reader: XmlReader): Boolean {
        return false
    }

    override fun deserializeChildText(elementText: CharSequence): Boolean {
        return false
    }

    override fun deserializeAttribute(attributeNamespace: String?,
                                      attributeLocalName: String,
                                      attributeValue: String): Boolean {
        when (attributeLocalName) {
            "taskState" -> {
                taskStateString = attributeValue
                return true
            }
        }
        return false
    }

    override fun onBeforeDeserializeChildren(reader: XmlReader) {

    }

    override fun serialize(out: XmlWriter) {
        out.smartStartTag(ELEMENTNAME) {
            writeAttribute(ATTRTASKSTATE, nodeInstanceState.name)
        }
    }

    companion object {

        const val NAMESPACE = ProcessConsts.Engine.NAMESPACE

        const val ELEMENTLOCALNAME = "ActivityResponse"
        val ELEMENTNAME = QName(NAMESPACE, ELEMENTLOCALNAME, Engine.NSPREFIX)

        const val ATTRTASKSTATE = "taskState"

        /**
         * Static helper factory for creating a new ActivityResponse.
         *
         * @param nodeInstanceState The state of the task requested.
         * @param returnType The actual return type of the method.
         * @param returnValue The value to return.
         * @return
         */
        fun <V : Any> create(nodeInstanceState: NodeInstanceState,
                             returnType: Class<V>,
                             returnValue: V): ActivityResponse<V> {
            return ActivityResponse(nodeInstanceState, returnType, returnValue)
        }

        fun <T> deserialize(reader: XmlReader): ActivityResponse<T> {
            return ActivityResponse<T>().deserializeHelper(reader)
        }
    }

}
